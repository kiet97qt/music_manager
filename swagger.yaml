swagger: "2.0"
info:
  description: "This is a interface music-manager server.  You can use this to test APIs"
  version: "1.0.0"
  title: "Swagger Music Manager Server"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:3001"
   
tags:
- name: "song"
  description: "Song APIs"
schemes:
- "http"
definitions:
  Song:
    type: "object"
    properties:
      name:
        type: "string"
        example: "Whistle"
      singer:
        type: "string"
        example: "Florida"
      genre: 
        type: "string"
        example: "Pop Ballad"
      link:
        type: "string"
        example: "https://youtube.com/whistle"
      additional:
        type: "string"
        example: "additional..."   
  Ids: 
    type: "object"
    properties:
      ids:
        type: "array"
        items:
          type: string
        example: ["61277e2668e0a3fe900177f6"]         
paths:
  /song:
    post:
      tags:
      - "song"
      summary: "Create new song"
      description: ""
      operationId: "CreateSong"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "song informations"
        description: "Create new song"
        schema:
          $ref: "#/definitions/Song"        
      responses:
        "201":
          description: "The song has been successfully created"  
  /songs:   
    get:
      tags:
      - "song"
      summary: "Get All Songs"
      description: ""
      operationId: "getAllSongs"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        "200":
          description: "The song has been successfully fetched."    
    delete:
      tags:
      - "song"
      summary: "delete songs by ids"
      description: ""
      operationId: "deleteSongsByIds"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "songsIds"
        description: "The ID of songs which you want to delete"  
        required: true
        schema:
          $ref: "#/definitions/Ids"        
      responses:
        "200":
          description: "The songs has been successfully deleted."
        "404":  
          description: "Resource Not Found."
  /song/{id}:
    get:
      tags:
      - "song"
      summary: "Get Song by ID"
      description: ""
      operationId: "getSongById"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "path"
        name: id
        description: "The ID of song which you want to get"  
        required: true
        schema:
          type: "string"  
      responses:
        "200":
          description: "The song has been successfully fetched."     
        "404":  
          description: "Resource Not Found."  
    delete:
      tags:
      - "song"
      summary: "delete Song by ID"
      description: ""
      operationId: "deleteSongById"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "path"
        name: id
        description: "The ID of song which you want to delete"  
        required: true
        schema:
          type: "string"  
      responses:
        "200":
          description: "The song has been successfully deleted."     
        "404":  
          description: "Resource Not Found."    
    put:
      tags:
      - "song"
      summary: "update Song"
      description: ""
      operationId: "updateSong"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "path"
        name: id
        description: "The ID of song which you want to update"  
        required: true
        schema:
          type: "string"
      - in: "body"
        name: "song informations"
        description: "update song"
        schema:
          $ref: "#/definitions/Song"    
      responses:
        "200":
          description: "The song has been successfully updated."     
        "404":  
          description: "Resource Not Found."      
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"